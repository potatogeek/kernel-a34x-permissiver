<<<<<<< HEAD
=======
# SPDX-License-Identifier: GPL-2.0-only
>>>>>>> upstream/android-13
menu "CPU Idle"

config CPU_IDLE
	bool "CPU idle PM support"
	default y if ACPI || PPC_PSERIES
	select CPU_IDLE_GOV_LADDER if (!NO_HZ && !NO_HZ_IDLE)
<<<<<<< HEAD
	select CPU_IDLE_GOV_MENU if (NO_HZ || NO_HZ_IDLE)
	select CPU_IDLE_GOV_MTK_MENU if (NO_HZ || NO_HZ_IDLE) && !CPU_IDLE_NO_MTK
=======
	select CPU_IDLE_GOV_MENU if (NO_HZ || NO_HZ_IDLE) && !CPU_IDLE_GOV_TEO
>>>>>>> upstream/android-13
	help
	  CPU idle is a generic framework for supporting software-controlled
	  idle processor power management.  It includes modular cross-platform
	  governors that can be swapped during runtime.

	  If you're using an ACPI-enabled platform, you should say Y here.

if CPU_IDLE

config CPU_IDLE_MULTIPLE_DRIVERS
<<<<<<< HEAD
        bool
=======
	bool
>>>>>>> upstream/android-13

config CPU_IDLE_GOV_LADDER
	bool "Ladder governor (for periodic timer tick)"

config CPU_IDLE_GOV_MENU
	bool "Menu governor (for tickless system)"

<<<<<<< HEAD
config CPU_IDLE_GOV_MTK
        bool "MTK governor (for MediaTek SoCs)"
        help
          MTK governor is used for MTK SoCs to select the correct idle state,
          which applies system scenario-based policy.
          MTK governor is specified for MTK SoCs.
          MTK CPUidle drivers should be paired with MTK governer.

config CPU_IDLE_GOV_MTK_MENU
        bool "MTK menu governor (for MediaTek SoCs)"
        help
          MTK menu governor is based on upstream menu governor,
          and modify predict_us policy to fit
          execution characteristics of MTK SoCs.
          MTK menu can be substituted for upstream menu governor

config CPU_IDLE_NO_MTK
	bool "Disable MTK related cpuidle driver / governor"
	help
	  MTK added many proprietary cpuidle drivers and governors.
	  And some of them set to be default for all projects.
	  But not all (MTK) projects use these driver.
	  Set this option to avoid using MTK driver / gorvernor by default.
=======
config CPU_IDLE_GOV_TEO
	bool "Timer events oriented (TEO) governor (for tickless systems)"
	help
	  This governor implements a simplified idle state selection method
	  focused on timer events and does not do any interactivity boosting.

	  Some workloads benefit from using it and it generally should be safe
	  to use.  Say Y here if you are not happy with the alternatives.

config CPU_IDLE_GOV_HALO
	bool "History AnaLysis Oriented (HALO) idle governor (for tickless systems)"
	help
	  Exynos Custom idle governor

config CPU_IDLE_GOV_HALTPOLL
	bool "Haltpoll governor (for virtualized systems)"
	depends on KVM_GUEST
	help
	  This governor implements haltpoll idle state selection, to be
	  used in conjunction with the haltpoll cpuidle driver, allowing
	  for polling for a certain amount of time before entering idle
	  state.

	  Some virtualized workloads benefit from using it.
>>>>>>> upstream/android-13

config DT_IDLE_STATES
	bool

menu "ARM CPU Idle Drivers"
depends on ARM || ARM64
source "drivers/cpuidle/Kconfig.arm"
endmenu

menu "MIPS CPU Idle Drivers"
depends on MIPS
source "drivers/cpuidle/Kconfig.mips"
endmenu

menu "POWERPC CPU Idle Drivers"
depends on PPC
source "drivers/cpuidle/Kconfig.powerpc"
endmenu

<<<<<<< HEAD
=======
config HALTPOLL_CPUIDLE
	tristate "Halt poll cpuidle driver"
	depends on X86 && KVM_GUEST
	default y
	help
	 This option enables halt poll cpuidle driver, which allows to poll
	 before halting in the guest (more efficient than polling in the
	 host via halt_poll_ns for some scenarios).

>>>>>>> upstream/android-13
endif

config ARCH_NEEDS_CPU_IDLE_COUPLED
	def_bool n
endmenu
