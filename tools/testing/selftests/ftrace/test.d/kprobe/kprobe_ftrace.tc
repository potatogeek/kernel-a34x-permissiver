#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# description: Kprobe dynamic event with function tracer
<<<<<<< HEAD

[ -f kprobe_events ] || exit_unsupported # this is configurable
grep function available_tracers || exit_unsupported # this is configurable

# prepare
echo nop > current_tracer
echo _do_fork > set_ftrace_filter
echo 0 > events/enable
echo > kprobe_events
echo 'p:testprobe _do_fork' > kprobe_events
=======
# requires: kprobe_events stack_trace_filter function:tracer

# prepare
echo nop > current_tracer
echo $FUNCTION_FORK > set_ftrace_filter
echo "p:testprobe $FUNCTION_FORK" > kprobe_events
>>>>>>> upstream/android-13

# kprobe on / ftrace off
echo 1 > events/kprobes/testprobe/enable
echo > trace
( echo "forked")
grep testprobe trace
<<<<<<< HEAD
! grep '_do_fork <-' trace
=======
! grep "$FUNCTION_FORK <-" trace
>>>>>>> upstream/android-13

# kprobe on / ftrace on
echo function > current_tracer
echo > trace
( echo "forked")
grep testprobe trace
<<<<<<< HEAD
grep '_do_fork <-' trace
=======
grep "$FUNCTION_FORK <-" trace
>>>>>>> upstream/android-13

# kprobe off / ftrace on
echo 0 > events/kprobes/testprobe/enable
echo > trace
( echo "forked")
! grep testprobe trace
<<<<<<< HEAD
grep '_do_fork <-' trace
=======
grep "$FUNCTION_FORK <-" trace
>>>>>>> upstream/android-13

# kprobe on / ftrace on
echo 1 > events/kprobes/testprobe/enable
echo function > current_tracer
echo > trace
( echo "forked")
grep testprobe trace
<<<<<<< HEAD
grep '_do_fork <-' trace
=======
grep "$FUNCTION_FORK <-" trace
>>>>>>> upstream/android-13

# kprobe on / ftrace off
echo nop > current_tracer
echo > trace
( echo "forked")
grep testprobe trace
<<<<<<< HEAD
! grep '_do_fork <-' trace

# cleanup
echo nop > current_tracer
echo > set_ftrace_filter
echo 0 > events/kprobes/testprobe/enable
echo > kprobe_events
echo > trace
=======
! grep "$FUNCTION_FORK <-" trace
>>>>>>> upstream/android-13
