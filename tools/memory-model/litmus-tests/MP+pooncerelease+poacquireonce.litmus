C MP+pooncerelease+poacquireonce

(*
 * Result: Never
 *
 * This litmus test demonstrates that smp_store_release() and
 * smp_load_acquire() provide sufficient ordering for the message-passing
 * pattern.
 *)

{}

<<<<<<< HEAD
P0(int *x, int *y)
{
	WRITE_ONCE(*x, 1);
	smp_store_release(y, 1);
}

P1(int *x, int *y)
=======
P0(int *buf, int *flag) // Producer
{
	WRITE_ONCE(*buf, 1);
	smp_store_release(flag, 1);
}

P1(int *buf, int *flag) // Consumer
>>>>>>> upstream/android-13
{
	int r0;
	int r1;

<<<<<<< HEAD
	r0 = smp_load_acquire(y);
	r1 = READ_ONCE(*x);
}

exists (1:r0=1 /\ 1:r1=0)
=======
	r0 = smp_load_acquire(flag);
	r1 = READ_ONCE(*buf);
}

exists (1:r0=1 /\ 1:r1=0) (* Bad outcome. *)
>>>>>>> upstream/android-13
